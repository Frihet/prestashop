GIT logs and which patches do what
-----------------------------------
patchlog.sh generates a set of text-files, each listing a set of git
commits that implements some feature or set of features. All pure
modules are grouped together, while all core changes (diffs to the
Prestashop code) are grouped properly according to functionality.

Generic stuff about Prestashop
-------------------------------
-{Hooks}-
Prestashop has something called hooks - it's a way for modules to
register content to be inserted in the page at various places. Hooks
are registered at install-time and can be re-registered/changed by the
admin user. that is, your module can hook a function into
hookLeftColumn at install time, and later be "transplanted" by the
admin so that that same function is registered for hookRightColumn.

If your module provides hooks itself for other modules, it needs to
create a hook entry in the database. This is done with the following
code snipped from within the install method:

	if (Hook::get('orderPriceAdjustment') == false) {
		$hook = new Hook();
		$hook->name = 'thisIsAHookName';
		$hook->title = 'Name to display in admin interface';
		$hook->description = 'Description to display in admin
		interface.';
		$hook->add();
	}

After that is done, the module can execute the hooked functions using

        $html = Module::hookExec('thisIsAHookName',
        array("some"=>"params","goes"=>"here"))

-{Templates'}
To display a smarty template from a module, don't use
$smarty->display("long/path/something.tpl"), but echo
$this->display(__FILE__, "something.tpl"), that way the template is
fethed either from the current directory, or from the theme if it has
such a template. If you have separate top-level php-files that needs
to do the same thing, do something like:

        require_once(dirname(__FILE__).'/mymodule.php');
	$mod = new MyModule();
	echo $mod->display(dirname(__FILE__).'/mymodule.php',
	'something.tpl');

-{ORM}-
Prestashop uses a home-grown object relationship mapper (ORM),
implemented in classes/ObjectModel.php. It is very simple, dumb and
easy to learn to use, except maybe the type system, where you can
declare the syntax for columns and have them auto-validated or
converted.

The order process
------------------
The order process has been modularized. New order pages are modules
that inherit from OrderPage. These must provide a member variable
orderPageTitle, and from these the order steps "trainmap" till be
constructed for each order page.

Themes
-------
Themes can be set per category, but are inherited from the parent
category of a category if it doesn't specify one. This is, by uggly
neccessity, done in config/config.inc.php. The name of the theme for a
category is stored in a varchar column in the category table (null
means inherit).

$NAME_OF_THEME/smarty-plugins is added to the smarty plugin search
path so that themes can add their own smarty plugins.

A smarty function called hookExec has been added that can be used to
call Prestashop hooks directly from templates. This, as opposed to the
standard hook execution (using $smarty->assign) allows the same hook
to be executed multiple times with different data within the same
page. This is used to add action buttons to products in the product
listing displays.

Hooks
------
Miscelanous extra hooks have been added here and there just to add the
ability to add content like buttons in specific places. Also note the
added hookExec theme function (see above un der Themes).

Articles
---------
A "type" columnt has been added to the product table, and this is used
to select different templates when rendering the product, as well as
select if product actions are shown or not, and which fields to show
during editing of a product. There are currently two types - product
and article. An article is a "product" that is not sold, and is shown
mostly like a newspaper article. It does not have a price, but can
have "accessories" (shown as "products used"), comments and everything
else product can have.

Price per currency
-------------------
The pricing system has been changed so that prices can be set
differently for each currency and customer group. This uses two
separate tables, product_price and product_attribute_price, and two
methods to generate the query SQL to fish out the right price,
classes/Product.php:Product::getProductPriceSql and
classes/Product.php:Product::getProductAttributePriceSql. Note that
transport price does not use such a system, but just converts price
using a global currency exchange rate.